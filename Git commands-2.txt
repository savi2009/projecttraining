
To get files changed
$git status

To get git history(log)
$git log

To get last 3 commit
$git log -3

to get by author name
 $ git log --author="name"

To List all the commits based on the commit message
  $ git log --grep="comment msg"

To list commit of author with keyword
$ git log --author="name" --grep="keyword"


To get diff between working dir, staging area
$git diff filename

#To See the content change of a file which is in 'stage' area will compare with last commit
$ git diff --staged filename

To get diff between staging area, last commit
$git log -1
$git diff  --staged ‹commitID›


To Get diff between last commit and working dir
$git log
$git diff  ‹commitID›

# See the content change of a file after the commit
$ git show ‹commitID›

To get diff betwen 2 commits of same file
$git log file_name
$git diff commit_ID_1 commit_ID_2 file_name


Git reset>> to unstage file
$git reset HEAD filename
$git status

Git checkout >> undo/revert local changes as well from source area
to get back to previous git commit
IMP BE VERY CAREFULL AT THIS as after checkout no modified data is in staged or commited etc..
  or make sure to have another copy stored somewhere

$git checkout filename


Deleting a file
To untrack file (to remove from staging area but not from WD)
$git rm --cached filename
$git status
to delete file from staging area and WD
$git rm filename
$git status

==================================================================
Renaming a file/folder
To rename gitbasics.txt to gitfile.txt
$mv gitbasics.txt  gitfile.txt
$git commit -am "commit message"

A.) mv gitbasics.txt  gitfile.txt 
    git commit -m "rename Login"
    git push		

Note:
Git will carry the history of old file to new file. To check complete history..
	$ git log --follow gitfile.txt


Unstage the changes from STAGE area
	$ git reset gitfile.txt
==================================================================

# BRANCHING
  A. What is a branch?
  >> Branching is nothing but directories, which holds stable code
    -for performance and integrity testing.
    -If still need to modify code then it will be copied and         placed in another directory(branch)

  B. Why and When we create a branch?
  >> To increase performance :- After collecting different       modules together how a whole code(system) works i.e.       load handling,system crash etc.i.e. system Integration Testing
  >> Let custmer use/buy code simultaniously

  C. Branching Strategies
  >>  code release calender (shared with stakeholders & Developers)
      1. When coding starts
      2. Code Testing
      3. Completing Coding
      4. Completing testing
      5. code freezing (10-15 days prior of releasing code)
          -To avoid last moment change
      7. more detailed testing 
      8. Final code release


 

# List all active branches in local repository
	$ git branch
To create new branch 
    $ git branch branchname
To push new branch to remote repository
   $ git push origin branchname
To switch from 1 branch to another
   $ git checkout branchname
To create and switch to new branch
   $ git checkout -b branchname_new
To list all remote branches
   $ git branch -r
To delete a branch
  $ git branch -d branchname
To confirm deletion in remote also
  $ git push -d origin branchname

To lists all the remotes that are configured
$git remote -v


buntu@s1:~/Desktop/dec23$ git push -d origin feature2
To https://github.com/savi2009/dec23.git
 - [deleted]         feature2





















